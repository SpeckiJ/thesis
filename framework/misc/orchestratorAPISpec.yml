openapi: '3.0.0'
info:
  description: "This is the specification for the API of the intueri-orchestrator system."
  version: "1.0.0-SNAPSHOT"
  title: "intueri-orchestrator"
  contact:
    email: "speckij@posteo.net"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "detector"
  description: "intueri-detectors"
- name: "rules"
  description: "intueri-rules"
- name: "config"
  description: "config for intueri-detectors"
paths:
  /detectors:
    get:
      tags:
      - "detector"
      summary: "Gets a list of all detectors"
      description: "Returns an Array of all detectors with their last known status"
      operationId: "getDetectors"
      responses:
        200:
          description: "successfully retrieved detectors"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/DetectorSchema'
        500:
          description: "error while retrieving detectors"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
  /detectors/{id}:
    put:
      tags: 
      - "detector"
      summary: Updates a detector
      parameters:
      - name: id
        in: path
        description: id of the detector to be updated
        required: true
        schema:
          type: string
      description: This method is used to update the config and enabledRules of a detector.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetectorSchemaPost'
      responses:
        200:
          description: "successfully updated detector"
        500:
          description: "Error occured while updating detector"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
  /configurations:
    get:
      tags:
      - "config"
      summary: "Gets a list of all configurations"
      description: "Returns an Array of all configurations"
      operationId: "getConfigurations"
      responses:
        200:
          description: "successfully retrieved configurations"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/ConfigSchema'
        500:
          description: "error while retrieving configurations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
    post:
      tags: 
      - "config"
      summary: Creates a new Configuration
      description: "Creates a new Configuration. The id field should be empty to allow for autogeneration of the id by the server. If an id is specified an a configuration with the id already exists the old 
        configuration is overwritten."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigSchema'
      responses:
        200:
          description: "successfully created configuration"
          
        400:
          description: "Error occured while creating configuration. Request was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
        500:
          description: "Error occured while creating configuration. Server error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
  /configurations/{id}:
    put:
      tags: 
      - "config"
      summary: Updates an existing Configuration
      description: "Updates an existing Configuration"
      parameters:
      - name: id
        in: path
        description: id of the configuration to be updated
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigSchemaWithId'
      responses:
        200:
          description: "successfully updated configuration"
          
        400:
          description: "Error occured while updating configuration. Request was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
        500:
          description: "Error occured while updating configuration. Server error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
    delete:
      tags: 
      - "config"
      summary: Deletes a Configuration
      description: Deletes a Configuration.
      parameters:
      - name: id
        in: path
        description: id of the configuration to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: "successfully deleted configuration"
        400:
          description: "Error occured while deleting configuration. Request was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
        500:
          description: "Error occured while deleting configuration. Server error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
                
  /rules:
    get:
      tags:
      - "rules"
      summary: "Gets a list of all Rules"
      description: "Returns an Array of all Rules"
      operationId: "getRules"
      responses:
        200:
          description: "successfully retrieved rules"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/RuleSchema'
        500:
          description: "error while retrieving rules"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
    post:
      tags: 
      - "rules"
      summary: Creates a new Rule
      description: "Creates a new Rule. The id field should be empty to allow for autogeneration of the id by the server. If an id is specified an a configuration with the id already exists the old 
        configuration is overwritten."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleSchema'
      responses:
        200:
          description: "successfully created rule"
          
        400:
          description: "Error occured while creating rule. Request was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
        500:
          description: "Error occured while creating rule. Server error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
  /rules/{id}:
    put:
      tags: 
      - "rules"
      summary: Updates an existing Rule.
      description: "Updates an existing Rule. The Schema of the Rule is autogenerated based on the schema of the datastore."
      parameters:
      - name: id
        in: path
        description: id of the rule to be updated
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleSchemaWithId'
            example:
            - id: DemoRule
              version: 1
              relation: value_blob
              output:
               - type: kafka
                 options:
                   topic: outputtopic
              filters:
               - type: COMPARISON
                 column: value_quantity
                 options:
                   operator: EQ
                   value: '23'
                   
      responses:
        200:
          description: "successfully updated configuration"
          
        400:
          description: "Error occured while updating configuration. Request was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
        500:
          description: "Error occured while updating configuration. Server error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
    delete:
      tags: 
      - "rules"
      summary: Deletes a Rule
      description: Deletes a Rule.
      parameters:
      - name: id
        in: path
        description: id of the rule to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: "successfully deleted rule"
        400:
          description: "Error occured while deleting rule. Request was invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
        500:
          description: "Error occured while deleting rule. Server error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSchema'
#    post:
#      tags:
#      - "pet"
#      summary: "Add a new pet to the store"
#      description: ""
#      operationId: "addPet"
#      consumes:
#      - "application/json"
#      - "application/xml"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - in: "body"
#        name: "body"
#        description: "Pet object that needs to be added to the store"
#        required: true
#        schema:
#          $ref: "#/definitions/Pet"
#      responses:
#        405:
#          description: "Invalid input"
#      security:
#      - petstore_auth:
#        - "write:pets"
#        - "read:pets"
#    put:
#      tags:
#      - "pet"
#      summary: "Update an existing pet"
#      description: ""
#      operationId: "updatePet"
#      consumes:
#      - "application/json"
#      - "application/xml"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - in: "body"
#        name: "body"
#        description: "Pet object that needs to be added to the store"
#        required: true
#        schema:
#          $ref: "#/definitions/Pet"
#      responses:
#        400:
#          description: "Invalid ID supplied"
#        404:
#          description: "Pet not found"
#        405:
#          description: "Validation exception"
#      security:
#      - petstore_auth:
#        - "write:pets"
#        - "read:pets"
components:
  schemas:
    ErrorSchema:
      type: "object"
      additionalProperties: false
      properties:
        errorMessage:
          type: "string"
          example: "Oh noes an error has occurred!"
    DetectorSchemaPost:
      type: object
      required:
      - config
      - enabledRuleIds
      properties:
        config:
          type: string
          title: The unique Id of the config of this detector
          example: "9c90817d-a107-4a78-ab71-1057301e2fb9"
        enabledRuleIds:
          type: array
          items:
            type: string
          title: The unique Ids of all rules currently applied by this detector
          example: 
          - "0b7916d7-99e6-47d7-aaa6-b4387daa8781"
          - "e59e7e8e-9e71-499b-b88f-92bb3b8c8c0f"
    DetectorSchema:
      type: object
      required:
      - id
      - name
      - status
      - schema
      - config
      - enabledRules
      - availableRules
      properties:
        id:
          type: string
          title: The unique Id of the detector
          example: "c08364df-628e-479e-8b7f-3614cc9a8aca"
          pattern: "^(([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12})$"
        name:
          type: string
          title: The human readable name of the detector
          example: "Detector on Primary Datastore XY123"
        status:
          type: string
          title: The current status of the detector
          enum:
          - "WAITING_FOR_CONFIG"
          - "UPDATING_SCHEMA"
          - "WAITING FOR RULES"
          - "BOOTSTRAPPING"
          - "PAUSED"
          - "RUNNING"
          - "ERROR"
        schemaId:
          type: string
          title: The unique Id of the schema used in the datastore of this detector
          example: "d8fb57f1-f922-44a1-a5de-20465a5f3ce0"
          pattern: "^(([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12})$"
        config:
          type: string
          title: The unique Id of the config of this detector
          pattern: "^(([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12})$"
          example: "9c90817d-a107-4a78-ab71-1057301e2fb9"
        enabledRules:
          type: array
          items:
            type: string
          title: The unique Ids of all rules currently applied by this detector
          pattern: "^(([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12})$"
          example: 
          - "0b7916d7-99e6-47d7-aaa6-b4387daa8781"
          - "e59e7e8e-9e71-499b-b88f-92bb3b8c8c0f"
        availableRules:
          type: array
          items:
            type: string
          title: The unique Ids of all rules currently applied by this detector
          pattern: "^(([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12})$"
          example: 
          - "0b7916d7-99e6-47d7-aaa6-b4387daa8781"
          - "e59e7e8e-9e71-499b-b88f-92bb3b8c8c0f"
    ConfigSchemaWithId:
      allOf:
      - $ref: '#/components/schemas/ConfigSchema'
      - type: object
        required:
        - id
    ConfigSchema:
      type: object
      required:
      - connector.class
      - offset.storage
      - offset.storage.file.filename
      - offset.flush.interval.ms
      - name
      - database.hostname
      - database.port
      - database.user
      - database.password
      - database.dbname
      - server.id
      - database.server.name
      - database.history
      - database.history.file.filename
      - table.blacklist
      - engine.threads.corePoolSize
      - engine.threads.maxPoolSize
      properties:
        id:
          type: string
          title: Unique Identifier of this Configuration. This value is autogenerated by the Server if not set.
          example: "9c90817d-a107-4a78-ab71-1057301e2fb9"
          pattern: "^(([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12})$"
        name:
          type: string
          title: Human readable name of this Configuration
          example: "Configuration for Primary Datastore XY123"
        connector.class:
          type: string
          title: The Connector.class Schema
          default: ''
          example: io.debezium.connector.postgresql.PostgresConnector
          pattern: "^(.*)$"
        offset.storage:
          type: string
          title: The Offset.storage Schema
          default: ''
          example: org.apache.kafka.connect.storage.FileOffsetBackingStore
          pattern: "^(.*)$"
        offset.storage.file.filename:
          type: string
          title: The Offset.storage.file.filename Schema
          default: ''
          example: offset.dat
          pattern: "^(.*)$"
        offset.flush.interval.ms:
          type: integer
          title: The Offset.flush.interval.ms Schema
          default: 0
          example: 60000
        database.hostname:
          type: string
          title: The Database.hostname Schema
          default: ''
          example: 127.0.0.1
          pattern: "^(.*)$"
        database.port:
          type: integer
          title: The Database.port Schema
          default: 0
          example: 5000
        database.user:
          type: string
          title: The Database.user Schema
          default: ''
          example: postgres
          pattern: "^(.*)$"
        database.password:
          type: string
          title: The Database.password Schema
          default: ''
          example: 'postgres'
          pattern: "^(.*)$"
        database.dbname:
          type: string
          title: The Database.dbname Schema
          default: ''
          example:
          - test
          pattern: "^(.*)$"
        server.id:
          type: integer
          title: The Server.id Schema
          default: 0
          example: 85744
        database.server.name:
          type: string
          title: The Database.server.name Schema
          default: ''
          example: test
          pattern: "^(.*)$"
        database.history:
          type: string
          title: The Database.history Schema
          default: ''
          example: io.debezium.relational.history.FileDatabaseHistory
          pattern: "^(.*)$"
        database.history.file.filename:
          type: string
          title: The Database.history.file.filename Schema
          default: ''
          example: dbhistory.dat
          pattern: "^(.*)$"
        table.blacklist:
          type: string
          title: The Table.blacklist Schema
          default: ''
          example: public.spatial_ref_sys
          pattern: "^(.*)$"
        engine.threads.corePoolSize:
          type: integer
          title: The Engine.threads.corepoolsize Schema
          default: 0
          example: 4
        engine.threads.maxPoolSize:
          type: integer
          title: The Engine.threads.maxpoolsize Schema
          default: 1
          example: 4
    RuleSchema:
      type: object
      description: Schemas that all rules applicable to this detector have to conform to. Is autogenerated based on the schema of the datastore.
      
    RuleSchemaWithId:
      allOf:
      - $ref: '#/components/schemas/RuleSchema'
      - type: object
        required:
        - id
      
